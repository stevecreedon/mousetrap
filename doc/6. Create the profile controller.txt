1. Create the Profile controller

	bundle exec rails g controller :profiles
	
2. Create the route

    resources :users, :only => [:index] do
    	resource :profile
  	end

3. Write some tests for the controller

3.1 Add this helper so we can call file_fixture_upload in our Factory

    include ActionDispatch::TestProcess	

3.2 Create the Factory

    FactoryGirl.define do
	  factory :profile do
	    name 'steve test creedon'
	    description 'this is a test description'
	    photo {
	      fixture_file_upload(Rails.root.join('spec','photos','photo.jpg'),'image/jpeg')
	    }
	  end
	end
	
3.3 Test and build the show action

    create an empty profiles/show.html.erb

   	it 'should assign the profile based on the user_id provided' do
   
  	   profile = FactoryGirl.create(:profile)
	   user = FactoryGirl.create(:user)
   
	   user.profile = profile
   
	   User.stub(:find).with(user.id).and_return(user)
   
	   get :show, :user_id => user.id.to_s
   
	   assigns(:profile).should == profile
   end

3.4 Test and build the new action
    
    create an empty profiles/new.html.erb

    it 'should assign an empty profile' do
  
      get :new, :user_id => '1234'
  
      assigns(:profile).is_a?(Profile).should be_true
      assigns(:profile).new_record?.should be_true 

    end

3.5 Test and build the create action

    

    it 'should create a new profile with valid data' do
    	photo_path = File.join('/','photos', 'photo.jpg')
    	photo = fixture_file_upload(photo_path,'image/jpeg')
    	name = 'test name'
    	user = FactoryGirl.create(:user)
    	User.stub(:find).with(user.id.to_s).and_return(user)
    
    	lambda do
      		post :create, :user_id => user.id.to_s, :profile => {:photo => photo, :name => name}
    	end.should change(Profile, :count).by(1)
  	end


  
	it 'should redirect to the profile show action when the profile is successfuly saved' do   
	    Profile.any_instance.stub(:save).and_return(true)
	    User.stub(:find).with('1234').and_return(FactoryGirl.create(:user))
    
	    post :create, :user_id => "1234", :profile => {}
    
	    response.should redirect_to(user_profile_path('1234'))
	end
  
	it 'should render the new template when the profile is not successfuly saved' do   
	    Profile.any_instance.stub(:save).and_return(false)
	    User.stub(:find).with('1234').and_return(FactoryGirl.create(:user))
    
	    post :create, :user_id => "1234", :profile => {}
    
	    response.should render_template("new")
	end

    
3.6 Test and build the edit action

   create an empty edit.html.erb

   	it 'should assign the specified users profile' do

      profile = FactoryGirl.create(:profile)
      user = FactoryGirl.create(:user)
      user.profile = profile
 
      user.stub(:find).with(user.id.to_s).and_return(user)
 
 	  get :edit, :user_id => user.id.to_s
 
	  assigns(:profile).should == profile
	end
		
   end

3.7 Test and build the update action

  	it 'should update the specified users profile' do
		user = FactoryGirl.create(:user)
		user.profile = FactoryGirl.create(:profile)
		Profile.any_instance.should_receive(:update_attributes).with("some attributes")

		user.stub(:find).with(user.id.to_s).and_return(user)

		put :update, :user_id => user.id, :profile => "some attributes"
	end

	it 'should redirect to the profile show action when the profile update is successful' do   
		user = FactoryGirl.create(:user)
		user.profile = FactoryGirl.create(:profile)
		user.profile.stub(:update_attributes).with("some attributes").and_return(true)
		User.stub(:find).with(user.id.to_s).and_return(user)

		put :update, :user_id => user.id, :profile => "some attributes"

		response.should redirect_to(user_profile_path(user.id))
	end

	it 'should render the new template when the profile update is not successful' do   
		user = FactoryGirl.create(:user)
		user.profile = FactoryGirl.create(:profile)
		user.profile.stub(:update_attributes).with("some attributes").and_return(false)
		User.stub(:find).with(user.id.to_s).and_return(user)


		put :update, :user_id => user.id, :profile => "some attributes"

		response.should render_template("edit")
	end

4. Create the form partial and add it to new and edit 

5. Link to them both from the users index

6. Create the show partial   